package tci.demo.week1.schoolassignment;

import java.util.Locale;
import java.util.Objects;

/**
 * A Course is an IMMUTABLE object with a given name, code and ec.
 * It's uniquely identified by it's course code (a string).
 * the name of the course (a string) should not be null
 * code should be 3 or 4 characters long and is in upper case
 * the number of EC's (ec) is a positive whole number.
 * If above parametes are wrong, an IllegalArgumentException should be thrown during construction.
 */
public class Course {
   // TODO: create code which complies with the specification above,
    // and uses the method calls below (add methods if you think they
    // are necessary (they are!).
    private static String code;
    private String name;
    private int ec;

    public Course(String name, String code, int ec) throws IllegalArgumentException{
        // TODO
        if(name == null){
            throw new IllegalArgumentException("Name must not be null");
        }
        if(ec < 0){
            throw new IllegalArgumentException("EC must not be negative");
        }
        if(code == null){
            throw new IllegalArgumentException("Code should not be null");
        }
        if(code.length() <3 || code.length() >4){
            throw new IllegalArgumentException("Code should be 3 or 4 characters long");
        }
        if(!code.toUpperCase().equals(code)){
            throw  new IllegalArgumentException("Code is not in uppercase");
        }

        this.name = name;
        this.code = code;
        this.ec = ec;
    }

     /******************************************************
     *
     *   GETTERS/SETTERS CODE CAN BE GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/

    public String getName() {
        return name;
    }


    public String getCode() {return code;}

    public int getEc() {return ec;}

    /**These 2 methods below can be auto-generated by the IDE **/
        @Override
    public boolean equals(Object o){
        if(this == o) return true;
        if(!(o instanceof Course)) return false;
        Course course = (Course) o;
        return code.equals(course.code);
    }

    @Override
    public int hashCode() {return Objects.hash(code);}
}

/*
*
* Note: An IMMUTABLE object is mostly used for transfering data between layers in your software
* , so it only has a constructor which sets ALL attributes, and it has getters (generated by the IDE)
* for all of the attributes.
* (this is a so called DTO: Data Transfer Object)
* 
*
 */

